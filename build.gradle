// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.versions = [
            compileSdk: 30,
            minSdk    : 21,

            kotlin    : "1.5.31",
            material  : "1.5.0-alpha01",

            appCompat : "1.2.0",
            constraint: "2.0.1",
            navigation: "2.1.0"
    ]

    ext.deps = [
            appcompat : "androidx.appcompat:appcompat:${versions.appCompat}",
            constraint: "androidx.constraintlayout:constraintlayout:${versions.constraint}",
            navigation: [
                    fragment: "androidx.navigation:navigation-fragment-ktx:${versions.navigation}",
                    ui: "androidx.navigation:navigation-ui-ktx:${versions.navigation}",
            ],
            material  : "com.google.android.material:material:${versions.material}",
            stdlib    : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    ]

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8")
        classpath("org.jacoco:org.jacoco.core:0.8.6")
        classpath("com.android.tools.build:gradle:4.2.2")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}")
        classpath("com.vanniktech:gradle-maven-publish-plugin:0.15.1")
    }
}

apply plugin: "jacoco"
apply plugin: "org.sonarqube"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

tasks.register("codeCoverageReport", JacocoReport) {
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks
                    .matching { t -> t.extensions.findByType(JacocoTaskExtension) }
                    .configureEach { testTask ->
                        sourceSets subproject.sourceSets.main
                        executionData(testTask)
                    }

            subproject.tasks
                    .matching { t -> t.extensions.findByType(JacocoTaskExtension) }
                    .forEach {
                        rootProject.tasks.codeCoverageReport.dependsOn(it)
                    }
        }
    }

    reports {
        xml.enabled true
        html.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "Decathlon_vitamin-android"
        property "sonar.organization", "decathlon"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "$rootDir/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        property "sonar.login", System.getenv("SONAR_TOKEN") ?: SONAR_TOKEN
        property "sonar.debug", true
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}